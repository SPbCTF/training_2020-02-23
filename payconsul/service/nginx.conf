worker_processes  2;

pid /var/run/nginx.pid;

error_log  /var/log/nginx/error.log  info;

events {
  worker_connections   2000;

  # use [ kqueue | epoll | /dev/poll | select | poll ];
  use epoll;
}

http {
  server {
    listen 80;

    location / {
      set $upstream_port '';

      if ($cookie_upid = "") {
        set_by_lua_block $upstream_id {
          math.randomseed(ngx.time())
          math.random(100)
          local num = math.random(100)

          if num > 20 then
            return 1
          else
            return 2
          end
        }

        add_header Set-Cookie "upid=$upstream_id; Domain=$host; Path=/";
      }

      if ($cookie_upid != "") {
        set_by_lua_block $upstream_id {
          return ngx.var.cookie_upid
        }
      }

      set_by_lua_block $port {
        return 8000 + tonumber(ngx.var.upstream_id)
      }

      proxy_pass http://127.0.0.1:$port;
    }

    location /static {
      alias /static/;
    }

    location /kv/set {
      set_by_lua_block $response {
        local sqlite3 = require("lsqlite3")
        db = sqlite3.open("/storage/storage.db", sqlite3.SQLITE_OPEN_READWRITE)

        params = ngx.req.get_uri_args()
        prepared_query = 'INSERT INTO kv VALUES("%s", "%s");'
        result = db:exec(prepared_query:format(params["key"], params["value"]))

        db:close()
        if result == 0 then
          return "OK"
        else
          return "FAIL"
        end
      }

      return 200 $response;
    }

    location /kv/get {
      set_by_lua_block $response {
        local sqlite3 = require("lsqlite3")
        db = sqlite3.open("/storage/storage.db", sqlite3.SQLITE_OPEN_READWRITE)

        params = ngx.req.get_uri_args()
        prepared_query = 'SELECT value FROM kv WHERE key = "%s";'

        value = 'No data'
        for a in db:urows(prepared_query:format(params["key"])) do
          value = a
          break
        end

        db:close()
        return value
      }

      return 200 $response;
    }
  }

  server {
    listen        127.0.0.1:8001;
    server_name   backend1;

    location / {
      proxy_pass http://backend1;
    }
  }

  server {
    listen        127.0.0.1:8002;
    server_name   backend2;

    location / {
      proxy_pass http://backend2;
    }
  }
}